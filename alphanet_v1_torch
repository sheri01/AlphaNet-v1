import torch
from torch import Tensor
from torch import nn

def cor(x:Tensor):
    """
    特征维度上的相关系数
    x：一个卷积窗口
    """
    length = x.shape[0]
    temp = torch.zeros(size=[length * (length - 1) // 2])
    index = 0
    for row1 in range(length):
        for row2 in range(row1 + 1, length):
            temp[index] = torch.corrcoef(x)[row1,row2]
            index += 1
    return torch.where(torch.isnan(temp), torch.full_like(temp, 0), temp)

def ts_corr(x: Tensor, d, stride=10):
    """
    x:输入的股票数据图片
    d:窗口长度
    stride:时间间隔
    """
    def t_corr(aPic:Tensor):
        """
        输入为一张图片
        """
        length = aPic.shape[0]
        width = aPic.shape[1]
        feature = torch.zeros(size=[length * (length - 1) // 2, (width - d) // stride + 1])
        # 时间维度求相关系数
        index = 0
        for col in range(0, width - d + 1, stride):
            feature[:, index] = cor(aPic[:,col:col + stride])
            index += 1
        return feature
    
    try:
        if x.ndim != 4:
            raise IndexError
        elif x.shape[1] != 1 or x.shape[2] != 9 or x.shape[3] != 30:
            raise RuntimeError
    except IndexError as e1:
        print(repr(e1), ":请输入4维张量([样本数, 1, 9, 30])")
    except RuntimeError as e2:
        print(repr(e2), ":输入张量形状不正确([样本数, 1, 9, 30])")

    corr = torch.zeros(size=(1, 1, 36, 3))  # 经过自定义网络层的输出大小，要修改
    for i in range(0, x.shape[0]):
        x1 = t_corr(x[i, 0, :, :])  # 对一个样本做特征提取
        x1 = x1.reshape(1, 1, x1.shape[0], x1.shape[1])  # reshape成可拼接的形状
        corr = torch.vstack((corr, x1)) 
    return corr[1:, :, :, :]

# 特征维度求协方差
# col为起始列数

def covx(x):
    """
    特征维度上的协方差
    x：一个“卷积”窗口
    """
    length = x.shape[0]
    temp = torch.zeros(size=[length * (length - 1) // 2])
    index = 0
    for row1 in range(length):
        for row2 in range(row1 + 1, length):
            temp[index] = torch.cov(x)[row1,row2]
            index += 1
    return temp

def ts_cov(x:Tensor, d, stride=10):
    """
    x:输入的股票数据
    d:窗口长度
    stride:时间间隔
    """
    def t_cov(aPic:Tensor):
        """
        输入为一张图片
        """
        length = aPic.shape[0]
        width = aPic.shape[1]
        covxy = torch.zeros(size=[length * (length - 1) // 2, (width - d) // stride + 1])
        # 时间维度求相关系数
        index = 0
        for col in range(0, width - d + 1, stride):
            covxy[:, index] = covx(aPic[:,col:col + stride])
            index += 1
        return covxy

    try:
        if x.ndim != 4:
            raise IndexError
        elif x.shape[1] != 1 or x.shape[2] != 9 or x.shape[3] != 30:
            raise RuntimeError
    except IndexError as e1:
        print(repr(e1), ":请输入4维张量([样本数, 1, 9, 30])")
    except RuntimeError as e2:
        print(repr(e2), ":输入张量形状不正确([样本数, 1, 9, 30])")

    cov = torch.zeros(size=(1, 1, 36, 3))  # 经过自定义网络层的输出大小，要修改
    for i in range(0, x.shape[0]):
        x1 = t_cov(x[i, 0, :, :])  # 将样本拆分
        x1 = x1.reshape(1, 1, x1.shape[0], x1.shape[1])  # reshape成可拼接的形状
        cov = torch.vstack((cov, x1))
    return cov[1:, :, :, :]

# 过去 d 天 X 值构成的时序数列的标准差
def ts_stddev(x:Tensor, d, stride=10):
    """
    x:输入的股票数据
    d:窗口长度
    stride:时间间隔
    """
    def t_stddev(aPic:Tensor):
        """
        输入为一张图片
        """
        length = aPic.shape[0]
        width = aPic.shape[1]
        stdx = torch.zeros([length, (width - d) // stride + 1])
        # col为起始列数
        index = 0
        for col in range(0, width - d + 1, stride):
            for row in range(0, length):
                stdx[row, index] = torch.std(aPic[row, col:col + d])
            index += 1
        return stdx

    try:
        if x.ndim != 4:
            raise IndexError
        elif x.shape[1] != 1 or x.shape[2] != 9 or x.shape[3] != 30:
            raise RuntimeError
    except IndexError as e1:
        print(repr(e1), ":请输入4维张量([样本数, 1, 9, 30])")
    except RuntimeError as e2:
        print(repr(e2), ":输入张量形状不正确([样本数, 1, 9, 30])")

    stddev = torch.zeros(size=(1, 1, 9, 3))  # 经过自定义网络层的输出大小，要修改
    for i in range(0, x.shape[0]):
        x1 = t_stddev(x[i, 0, :, :])  # 将样本拆分
        x1 = x1.reshape(1, 1, x1.shape[0], x1.shape[1])  # reshape成可拼接的形状
        stddev = torch.vstack((stddev, x1))
    return stddev[1:, :, :, :]

# 过去 d 天 X 值构成的时序数列的平均值除以标准差
def ts_zscore(x:Tensor, d, stride=10):
    """
    x:输入的股票数据
    d:窗口长度
    stride:时间间隔
    """
    def t_zscore(aPic:Tensor):
        """
        输入为一张图片
        """
        length = aPic.shape[0]
        width = aPic.shape[1]
        z_score = torch.zeros([length, (width - d) // stride + 1])
        # col为起始列数
        index = 0
        for col in range(0, width - d + 1, stride):
            for row in range(0, length):
                mean = torch.mean(aPic[row, col:col + d])
                stdx = torch.std(aPic[row, col:col + d])
                # 加上10e-8避免除0
                stdx = 10e-8
                z_score[row, index] = mean / stdx
            index += 1
        return z_score

    try:
        if x.ndim != 4:
            raise IndexError
        elif x.shape[1] != 1 or x.shape[2] != 9 or x.shape[3] != 30:
            raise RuntimeError
    except IndexError as e1:
        print(repr(e1), ":请输入4维张量([样本数, 1, 9, 30])")
    except RuntimeError as e2:
        print(repr(e2), ":输入张量形状不正确([样本数, 1, 9, 30])")

    zs = torch.zeros(size=(1, 1, 9, 3))  # 经过自定义网络层的输出大小，要修改
    for i in range(0, x.shape[0]):
        x1 = t_zscore(x[i, 0, :, :])  # 将样本拆分
        x1 = x1.reshape(1, 1, x1.shape[0], x1.shape[1])  # reshape成可拼接的形状
        zs = torch.vstack((zs, x1))
    return zs[1:, :, :, :]

# d 天以前的 X 值
def delay(x:Tensor, currentDay, d):
    """
    x:(N, 1, 9, 30)
    d:窗口长度
    return:返回d天前的X
    """
    tempX = torch.zeros((9,1)) # feature, 天数
    for i in range(x.shape[0]):
        tempX = torch.cat((tempX, torch.unsqueeze(x[i,0,:,0],dim=1)), dim=1)
    catX = torch.hstack((tempX, x[-1,0,:,1:]))[:,1:]
    if currentDay < d:
        return catX[:,0]
    else:
        return catX[:,currentDay-d]

# (X - delay(X, d))/delay(X, d)-1
def ts_return(x:Tensor, d, stride=10):
    """
    x:输入的股票数据
    d:窗口长度
    stride:时间间隔
    return:(X - delay(X, d))/delay(X, d)-1, delay(X,d)为d天前X的值
    """
    def t_return(aPic:Tensor, num, x=x):
        """
        num: 第几张图片
        输入为一张图片
        x为全部图片
        """
        length = aPic.shape[0]
        width = aPic.shape[1]
        res = torch.zeros([length, (width - d) // stride + 1])
        # col为起始列数
        index = 0
        for col in range(0, width - d + 1, stride):
            currentDay = num + col
            de = delay(x=x, currentDay=currentDay, d=d)
            res[:, index] = (aPic[:, col] - de)/de-1
            index += 1
        return res

    try:
        if x.ndim != 4:
            raise IndexError
        elif x.shape[1] != 1 or x.shape[2] != 9 or x.shape[3] != 30:
            raise RuntimeError
    except IndexError as e1:
        print(repr(e1), ":请输入4维张量([样本数, 1, 9, 30])")
    except RuntimeError as e2:
        print(repr(e2), ":输入张量形状不正确([样本数, 1, 9, 30])")

    re = torch.zeros(size=(1, 1, 9, 3))  # 经过自定义网络层的输出大小，要修改
    for i in range(0, x.shape[0]):
        x1 = t_return(x[i, 0, :, :], num=i)  # 将样本拆分
        x1 = x1.reshape(1, 1, x1.shape[0], x1.shape[1])  # reshape成可拼接的形状
        re = torch.vstack((re, x1))
    return re[1:, :, :, :]

# 过去 d 天 X 值构成的时序数列的加权平均值
# 权数为 d, d – 1, …, 1(权数之和应为 1，需进行归一化处理)，其中离现在越近的日子权数越大
def ts_decaylinear(x:Tensor, d, stride=10):
    """
    x:输入的股票数据
    d:窗口长度
    stride:时间间隔
    """
    def t_decaylinear(aPic:Tensor):
        """
        输入为一张图片
        """
        length = aPic.shape[0]
        width = aPic.shape[1]
        weight = torch.Tensor([w for w in range(d, 0, -1)]).to(torch.float)
        weight = weight / torch.sum(weight)
        dl = torch.zeros([length, (width - d) // stride + 1])
        # col为起始列数
        index = 0
        for col in range(0, width - d + 1, stride):
            for row in range(0, length):
                dl[row, index] =  torch.dot(aPic[row, col:col + d], weight)
            index += 1
        return dl

    try:
        if x.ndim != 4:
            raise IndexError
        elif x.shape[1] != 1 or x.shape[2] != 9 or x.shape[3] != 30:
            raise RuntimeError
    except IndexError as e1:
        print(repr(e1), ":请输入4维张量([样本数, 1, 9, 30])")
    except RuntimeError as e2:
        print(repr(e2), ":输入张量形状不正确([样本数, 1, 9, 30])")

    de = torch.zeros(size=(1, 1, 9, 3))  # 经过自定义网络层的输出大小，要修改
    for i in range(0, x.shape[0]):
        x1 = t_decaylinear(x[i, 0, :, :])  # 将样本拆分
        x1 = x1.reshape(1, 1, x1.shape[0], x1.shape[1])  # reshape成可拼接的形状
        de = torch.vstack((de, x1))
    return de[1:, :, :, :]

def cat2(x, y):
    """
    连接两个形状不同的张量，尺寸小的张量以0填充
    """
    # x多的，y少的
    a = torch.zeros(size=(y.shape[0], y.shape[1], x.shape[2] - y.shape[2], y.shape[3]))
    a = torch.cat((y, a), dim=2)
    return a


class feature_catch(nn.Module):
    """
    特征提取层
    """
    def __init__(self, d, stride):
        super().__init__()
        self.d = d
        self.stride = stride

    def forward(self, x):
        conv1 = ts_corr(x, self.d, self.stride)
        conv2 = ts_cov(x, self.d, self.stride)
        conv3 = ts_stddev(x, self.d, self.stride)
        conv3 = cat2(conv1, conv3)
        conv4 = ts_zscore(x, self.d, self.stride)
        conv4 = cat2(conv1, conv4)
        conv5 = ts_return(x, self.d, self.stride)
        conv5 = cat2(conv1, conv5)
        conv6 = ts_decaylinear(x, self.d, self.stride)
        conv6 = cat2(conv1, conv6)
        return torch.hstack((conv1, conv2, conv3, conv4, conv5, conv6))


class Pool2d(nn.Module):
    """
    池化层
    """
    def __init__(self, d, stride):
        super().__init__()
        self.d = d
        self.stride = stride

    def forward(self, x):
        t_mean = nn.AvgPool2d((1, self.d), stride=(1, self.stride))
        t_max = nn.MaxPool2d((1, self.d), stride=(1, self.stride))
        ts_mean = t_mean(x)
        ts_max = t_max(x)
        ts_min = - t_max(- x)
        return torch.stack((ts_mean, ts_max, ts_min), dim=1)


class InceptionA(nn.Module):
    """
    输入展平层前的汇总特征
    """
    def __init__(self):
        super(InceptionA, self).__init__()

        self.branch1 = nn.Sequential(
            feature_catch(d=10, stride=10),
            nn.BatchNorm2d(6),
            nn.Flatten()
        )

        self.branch2 = nn.Sequential(
            feature_catch(d=10, stride=10),
            nn.BatchNorm2d(6),
            Pool2d(d=3, stride=10),
            nn.BatchNorm3d(3),
            nn.Flatten()
        )

    def forward(self, x):
        branch1 = self.branch1(x)
        branch2 = self.branch2(x)
        return torch.cat((branch1, branch2), dim=1)

class catFeature(nn.Module):
    """
    单独拆分出特征提取层后的汇总层
    """
    def __init__(self):
        super(catFeature, self).__init__()

        self.branch1 = nn.Sequential(
            nn.BatchNorm2d(6),
            nn.Flatten()
        )

        self.branch2 = nn.Sequential(
            nn.BatchNorm2d(6),
            Pool2d(d=3, stride=10),
            nn.BatchNorm3d(3),
            nn.Flatten()
        )

    def forward(self, x):
        branch1 = self.branch1(x)
        branch2 = self.branch2(x)
        return torch.cat((branch1, branch2), dim=1)


def init_weights(m):
    """
    权重初始化
    """
    if type(m) == nn.Linear:
        nn.init.trunc_normal_(m.weight)
